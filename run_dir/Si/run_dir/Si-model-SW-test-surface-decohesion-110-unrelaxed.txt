Model SW, Test surface-decohesion-110-unrelaxed
Test run at 2020-08-04 23:39

model file: /Users/Cas/gits/testing-framework/run_dir/Si/run_dir/../models/SW/model.py
============================================================
# Model for Stillinger-Weber with original parameters for Si (Z=14)

import quippy

# A module defining a module needs to define only one variable,
# named `calculator`, which should be an instance of the ase.calculator.Calculator,
# a subclass of this, or a compatible class implementing the calculator interface.

calculator = quippy.potential.Potential('IP SW', param_str="""
<SW_params n_types="1">
<per_type_data type="1" atomic_num="14" />
<per_pair_data atnum_i="14" atnum_j="14" AA="7.049556277" BB="0.6022245584"
      p="4" q="0" a="1.80" sigma="2.0951" eps="2.1675" />
<per_triplet_data atnum_c="14" atnum_j="14" atnum_k="14"
      lambda="21.0" gamma="1.20" eps="2.1675" />
</SW_params>
""")

no_checkpoint = True
name = 'SW'
============================================================
test file: /Users/Cas/gits/testing-framework/scripts/../tests/Si/surface-decohesion-110-unrelaxed/test.py
============================================================
from ase.lattice.cubic import Diamond
import numpy as np

import ase.io, sys

# set of utility routines specific this this model/testing framework
from utilities import relax_config

# the current model
import model

a0 = 5.44 # initial guess at lattice constant, cell will be relaxed below
fmax = 0.01 # maximum force following relaxtion [eV/A]

# set up the a
bulk = Diamond(symbol='Si', latticeconstant=a0, directions=[[1,-1,0],[0,0,1],[1,1,0]])

# specify that we will use model.calculator to compute forces, energies and stresses
bulk.set_calculator(model.calculator)
# flip coord system for ASE (precon minim?)
c = bulk.get_cell()
t_v = c[0,:].copy()
c[0,:] = c[1,:]
c[1,:] = t_v
bulk.set_cell(c)

# use one of the routines from utilities module to relax the initial
# unit cell and atomic positions
bulk = relax_config(bulk, relax_pos=True, relax_cell=False, tol=fmax, traj_file=None)

# set up supercell
bulk *= (1, 1, 5)

ase.io.write(sys.stdout, bulk, format='extxyz')

def surface_energy(bulk, z_offset, opening):
    Nat = bulk.get_number_of_atoms()

    # shift so cut is through shuffle plane
    bulk.positions[:,2] += z_offset
    bulk.wrap()

    # relax atom positions, holding cell fixed
    # vac = relax_atoms(vac, fmax=fmax)

    # compute surface formation energy as difference of bulk and expanded cell
    ebulk = bulk.get_potential_energy()
    print('bulk cell energy', ebulk)

    bulk.cell[2,2] *= (np.abs(bulk.cell[2,2])+opening)/np.abs(bulk.cell[2,2])
    eexp  = bulk.get_potential_energy()

    ase.io.write(sys.stdout, bulk, format='extxyz')

    print('expanded cell energy', eexp)
    e_form = 0.5*(eexp - ebulk) / np.linalg.norm(np.cross(bulk.cell[0,:],bulk.cell[1,:]))
    print('unrelaxed 110 surface formation energy', e_form)
    return e_form

# dictionary of computed properties - this is output of this test, to
#   be compared with other models
n_steps = 35
max_opening = 3.5

openings = []
es = []
for i in range(n_steps + 1):
    opening = float(i)/float(n_steps)*max_opening
    openings.append(opening)
    bulk_copy = bulk.copy()
    bulk_copy.set_calculator(model.calculator)
    es.append(surface_energy(bulk_copy, 2.0, opening))

print("openings ", openings)
print("es ", es)
from scipy import interpolate
spline = interpolate.splrep(openings, es, s=0)
stresses = [x for x in interpolate.splev(openings, spline, der=1)]

print("stresses ", stresses)
properties = {'surface_decohesion_unrelaxed_opening': openings, 'surface_decohesion_unrelaxed_energy' : es, 'surface_decohesion_unrelaxed_stress' : stresses}
============================================================
Traceback (most recent call last):
  File "/Users/Cas/gits/testing-framework/scripts/run-model-test.py", line 117, in <module>
    import model # import and run the current model
  File "/Users/Cas/gits/testing-framework/run_dir/Si/run_dir/../models/SW/model.py", line 3, in <module>
    import quippy
ModuleNotFoundError: No module named 'quippy'
